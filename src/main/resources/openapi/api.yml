openapi: 3.0.0
info:
  version: 0.0.1
  title: Delegation Service
tags:
  - name: "Comment"
  - name: "Checkpoint"
  - name: "Delegation"
paths:
  /comments:
    post:
      summary: Creating new comment
      operationId: addComment
      tags:
        - "Comment"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"

    get:
      summary: Retrieving all comments from database
      tags:
        - "Comment"
      operationId: getComments
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
  /comments/{id}:
    get:
      summary: Retrieving comment from database by id
      tags:
        - "Comment"
      operationId: getCommentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
    delete:
      summary: Deleting comment by id
      tags:
        - "Comment"
      operationId: deleteComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Comment deleted"
    put:
      summary: Updating comment by id
      tags:
        - "Comment"
      operationId: updateComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Comment updated"
    patch:
      summary: Partially update comment
      tags:
        - "Comment"
      operationId: patchComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: RFC 6902
      responses:
        "200":
          description: "Comment patched"
  /comments/delegation/{delegationId}:
    get:
      summary: Retrieving comments from database by delegation id
      tags:
        - "Comment"
      operationId: getCommentsByDelegationId
      parameters:
        - name: delegationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Comment"
  /comments/parent/{parentId}:
    get:
      summary: Retrieving comments from database by parent id
      tags:
        - "Comment"
      operationId: getCommentsByParentId
      parameters:
        - name: parentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Comment"

  /comments/v2:
    post:
      summary: Creating new comment
      operationId: addCommentV2
      tags:
        - "Comment"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentV2"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentV2"

    get:
      summary: Retrieving all comments from database
      tags:
        - "Comment"
      operationId: getCommentsV2
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommentV2"
  /comments/v2/{id}:
    get:
      summary: Retrieving comment from database by id
      tags:
        - "Comment"
      operationId: getCommentByIdV2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentV2"
    delete:
      summary: Deleting comment by id
      tags:
        - "Comment"
      operationId: deleteCommentV2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Comment deleted"
    put:
      summary: Updating comment by id
      tags:
        - "Comment"
      operationId: updateCommentV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentV2"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Comment updated"
    patch:
      summary: Partially update comment
      tags:
        - "Comment"
      operationId: patchCommentV2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: string
              format: RFC 6902
      responses:
        "200":
          description: "Comment patched"
  /comments/v2/delegation/{delegationId}:
    get:
      summary: Retrieving comments from database by delegation id
      tags:
        - "Comment"
      operationId: getCommentsByDelegationIdV2
      parameters:
        - name: delegationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/CommentV2"
  /comments/v2/parent/{parentId}:
    get:
      summary: Retrieving comments from database by parent id
      tags:
        - "Comment"
      operationId: getCommentsByParentIdV2
      parameters:
        - name: parentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/CommentV2"

  /checklist:
    get:
      summary: Get checklist
      tags:
        - "Checkpoint"
      operationId: getChecklist
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Checkpoint"
  /checklist/{id}/{isChecked}:
    put:
      summary: Setting as checked the element of checklist
      tags:
        - "Checkpoint"
      operationId: setStatusOfCheckpoint
      parameters:
        - name: isChecked
          in: path
          required: true
          schema:
            type: boolean
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Checkpoint set as checked'

  # ----------------------------
  # -- DelegationsV1 -----------
  # ----------------------------
  /delegations:
    post:
      tags:
        - "Delegation"
      summary: Create a new delegation
      description: Create a new delegation
      operationId: createDelegation
      requestBody:
        description: Create a new delegation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Delegation"
        required: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Validation exception

    get:
      tags:
        - "Delegation"
      summary: Get all delegations
      description: Get all delegations
      operationId: getAllDelegations
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delegation'
          description: Successful operation
    # get listy delegacji
  /delegations/paginated:
    get:
      tags:
        - "Delegation"
      summary: Get paginated
      description: Get paginated
      operationId: getPaginated
      parameters:
        - in: query
          name: size
          schema:
            type: integer
            default: 50
            format: int32
          description: Size of the page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            format: int32
          description: Number of page
        - in: query
          name: sort
          schema:
            type: string
            default: id
          description: Sort results by column
        - in: query
          name: order
          schema:
            type: string
            default: desc
          description: Order results
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelegationList'
        '405':
          description: Validation exception
  /delegations/{delegationId}:
    put:
      tags:
        - "Delegation"
      summary: Update an existing delegation by id
      description: Update an existing delegation by id
      operationId: updateDelegation
      requestBody:
        description: Update an existing delegation by id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Delegation"
        required: true
      parameters:
        - name: delegationId
          in: path
          description: ID of delegation
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Delegation not found
        "405":
          description: Validation exception
    get:
      tags:
        - "Delegation"
      summary: Get a delegation by id
      description: Get a delegation by id
      operationId: getDelegation
      parameters:
        - name: delegationId
          in: path
          description: ID of delegation
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Delegation"
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Delegation not found
    delete:
      tags:
        - "Delegation"
      summary: Delete a delegation by id
      description: Delete a delegation by id
      operationId: deleteDelegation
      parameters:
        - name: delegationId
          in: path
          description: Delegation to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied


  # ----------------------------
  # -- DelegationsV2 -----------
  # ----------------------------
  /delegations/v2:
    post:
      tags:
        - "Delegation"
      summary: Create a new delegation
      description: Create a new delegation
      operationId: createDelegationV2
      requestBody:
        description: Create a new delegation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelegationV2'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Validation exception
    get:
      tags:
        - "Delegation"
      summary: Get all delegations
      description: Get all delegations
      operationId: getAllDelegationsV2
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DelegationV2'
          description: Successful operation
    # get listy delegacji
  /delegations/v2/paginated:
    get:
      tags:
        - "Delegation"
      summary: Get paginated
      description: Get paginated
      operationId: getPaginatedV2
      parameters:
        - in: query
          name: size
          schema:
            type: integer
            default: 50
            format: int32
          description: Size of the page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            format: int32
          description: Number of page
        - in: query
          name: sort
          schema:
            type: string
            default: id
          description: Sort results by column
        - in: query
          name: order
          schema:
            type: string
            default: desc
          description: Order results
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelegationListV2'
        '405':
          description: Validation exception
  /delegations/v2/{delegationId}:
    put:
      tags:
        - "Delegation"
      summary: Update an existing delegation by id
      description: Update an existing delegation by id
      operationId: updateDelegationV2
      requestBody:
        description: Update an existing delegation by id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelegationV2'
        required: true
      parameters:
        - name: delegationId
          in: path
          description: ID of delegation
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Delegation not found
        '405':
          description: Validation exception
    get:
      tags:
        - "Delegation"
      summary: Get a delegation by id
      description: Get a delegation by id
      operationId: getDelegationV2
      parameters:
        - name: delegationId
          in: path
          description: ID of delegation
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelegationV2'
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Delegation not found
    delete:
      tags:
        - "Delegation"
      summary: Delete a delegation by id
      description: Delete a delegation by id
      operationId: deleteDelegationV2
      parameters:
        - name: delegationId
          in: path
          description: Delegation to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied

components:
  schemas:
    Comment:
      description: This is a comment model
      type: object
      properties:
        id:
          description: The id of comment
          type: integer
          format: int64
          example: 16485
        delegationId:
          description: The id of delegation
          type: integer
          format: int64
          example: 15432
        parentId:
          description: The id of the parent comment
          type: integer
          format: int64
          example: 16485
        author:
          description: It's an author of the comment
          type: string
          example: Martin Bobo
        content:
          type: string
          example: The text of the comment
        date:
          type: string
          format: date
    CommentV2:
      description: This is a comment model
      type: object
      properties:
        id:
          description: The id of comment
          type: integer
          format: int64
          example: 16485
        delegationId:
          description: The id of delegation
          type: integer
          format: int64
          example: 15432
        parentId:
          description: The id of the parent comment
          type: integer
          format: int64
          example: 16485
        author:
          description: It's an author of the comment
          type: string
          example: Martin Bobo
        title:
          type: string
          example: The text of the comment
        content:
          type: string
          example: The text of the comment
        date:
          type: string
          format: date
    Checkpoint:
      description: This is an element of checklist
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 16425
        text:
          type: string
          example: Checkpoint name
        isChecked:
          type: boolean
        comment:
          type: string
          example: Checkpoint comment
    CheckpointV2:
      description: This is an element of checklist
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 16425
        text:
          type: string
          example: Checkpoint name
        isChecked:
          type: boolean
        comment:
          type: array
          items:
            type: string
    # ----------------------------
    # -- Delegations -------------
    # ----------------------------
    Delegation:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 15432
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        name:
          type: string
          example: Martin
        lastname:
          type: string
          example: Bobo
        location:
          type: string
          example: London, GB
        description:
          type: string
          example: Delegation description
    DelegationV2:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 15432
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        name:
          type: string
          example: Martin
        lastname:
          type: string
          example: Bobo
        city:
          type: string
          example: London
        countryCode:
          type: string
          example: GB
        description:
          type: string
          example: Delegation description
    DelegationList:
      type: object
      properties:
        totalCount:
          type: integer
          format: int64
          example: 900
        count:
          type: integer
          format: int32
        result:
          type: array
          items:
            $ref: '#/components/schemas/Delegation'
        page:
          type: integer
          format: int32
    DelegationListV2:
      type: object
      properties:
        totalCount:
          type: integer
          format: int64
          example: 900
        count:
          type: integer
          format: int32
          example: 50
        result:
          type: array
          items:
            $ref: '#/components/schemas/DelegationV2'
        page:
          type: integer
          format: int32
          example: 0
